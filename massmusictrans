#!/bin/bash

err_report() {
    echo " "
    read -r -p "Press any key to exit"
    exit
}

LOGF="/mnt/storage/video/Incoming/logs/musictranscoder.log"
INDEXFIL="/mnt/storage/video/Incoming/logs/musictranscoder.idx"
TRANSDIR="/TRANSCODE"

if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        echo " "
        echo "Galaxy Media Tools - Automatic Music Transcoder/ID/Rename/Move/Sort"
        echo " "
        echo "massmusictrans [-h] [-d] [-s] [-nid]"
	echo " "
	echo "-h or --help : Help"
        echo "-s  : Simulate only. Dont apply changes"
        echo "-nid : DO NOT run Beets music Identification (Transcode only)"
        echo "-a  : DO NOT have Beets prompt for changes (Automatic mode)"
        echo "-d <dir> : Specify a directory for base of search (instead of /music/process/unsorted)"
        echo " "
        exit 0
fi

if [ "$1" == "-s" ] || [ "$2" == "-s" ] || [ "$3" == "-s" ] || [ "$4" == "-s" ] ; then SIM="yes"; fi
if [ "$1" == "-nid" ] || [ "$2" == "-nid" ] || [ "$3" == "-nid" ] || [ "$4" == "-nid" ] ; then BID="no"; fi
if [ "$1" == "-a" ] || [ "$2" == "-a" ] || [ "$3" == "-a" ] || [ "$4" == "-a" ] ; then BAUTO="yes"; fi

if [ "$1" != "-d" ] && [ "$2" != "-d" ] && [ "$3" != "-d" ] && [ "$4" != "-d" ]; then

. /opt/galaxymediatools/functions/prechecknl

trap 'err_report $LINENO' SIGHUP SIGINT SIGTERM

SOURCEDIR="/mnt/storage/video/Incoming/musicprocess/unsorted"
echo -e "${magenta}Warming Up...${nocolor}"
chmod ugo+rwx /mnt/storage/video/Incoming/musicprocess -R
else
if [ "$1" == "-d" ]; then SOURCEDIR="$2"; fi
if [ "$2" == "-d" ]; then SOURCEDIR="$3"; fi
if [ "$3" == "-d" ]; then SOURCEDIR="$4"; fi
if [ "$4" == "-d" ]; then SOURCEDIR="$5"; fi
fi

log "INFO" "---> Starting Mass Music Transcoder on $HOSTNAME"
starttimer
if [ -f "$INDEXFIL" ]; then rm -f $INDEXFIL; fi
echo -e "${green}Using directory ${yellow}$SOURCEDIR${green} as base for music search.${nocolor}"
log "INFO" "Using directory $SOURCEDIR as base for music search."
starttimer2
if [ "$TRANSDIR" == "" ];then
log "ERROR" "ERROR! TRANSDIR is null. Exiting."
err_report
exit 1
fi
starttimer3
echo -e "${cyan}Cleaning out all junk files...${nocolor}"
log "INFO" "Cleaning out all junk files..."

find $SOURCEDIR -type f \( -name "*.jpg" -o -name "*.text" -o -name "*.TXT" -o -name "*.ffp" -o -name "*.SFV" -o -name "*.mid" -o -name "*.htm" -o -name "*.js" -o -name "*.html" -o -name "*.CUE" -o -name "*.cue" -o -name "*.rtf" -o -name "*.md5" -o -name "*.doc" -o -name "*.rar" -o -name "*." -o -name "*.DS_Store" -o -name "*.pdf" -o -name "*.url" -o -name "*.wpl" -o -name "*.lnk" -o -name "*.gif" -o -name "*.pls" -o -name "*.png" -o -name "*.jpeg" -o -name "*.db" -o -name "*.m3u" -o -name "*.ini" -o -name "*.sfk" -o -name "*.sfv" -o -name "*.nfo" -o -name "*.asd" -o -name "*.log" -o -name "*.bmp" -o -name "*.Bmp" -o -name "*.BMP" -o -name "*.new" -o -name "*.JPG" -o -name "._*" -o -name "*.Jpg" -o -name "*.GIF" -o -name "*.Gif" -o -name "*.txt" \) -exec rm -rf {} \;
ELAPSED3=$(elapsed3)
log "INFO" "All junk files cleaned out. Elapsed: $ELAPSED3"

starttimer3
echo -e "${cyan}Fixing filenames...${nocolor}"
log "INFO" "fixing filenames..."
find $SOURCEDIR -type f \( -name "*,*.wma" -o -name "*,*.Wma" -o -name "*,*.WMA" \) -exec /opt/galaxymediatools/functions/filefixname -rc {} \;
find $SOURCEDIR -type f \( -name "*.Mp3" -o -name "*.MP3" \) -exec /opt/galaxymediatools/functions/filefixname -le {} \;
find $SOURCEDIR -type f \( -name "*.avi" -o -name "*.mkv" -o -name "*.Avi" -o -name "*.AVI" -o -name "*.mpg"  \) -exec mv -f {} /mnt/storage/video/Incoming/musicprocess/failed_id/videos \;
ELAPSED3=$(elapsed3)
log "INFO" "Completed fixing filenames. Elapsed: $ELAPSED3"


log "INFO" "Building index of files to process on $THISSERVER"
echo -e "${cyan}Building index of files to process...${nocolor}"

find $SOURCEDIR -type f \( -name "*.flac" -o -name "*.wma" -o -name "*.WMA" -o -name "*.Wma" -o -name "*.FLAC"  -o -name "*.Flac" -o -name "*.m4a"  -o -name "*.M4a" -o -name "*.M4A" -o -name "*.ogg" -o -name "*.Ogg" -o -name "*.OGG" \) >> $INDEXFIL
i=0
while read sfile
do
    if [[ -f $sfile ]]; then
        file[$i]=$sfile
        i=$(($i+1))
    fi
done < $INDEXFIL
ELAPSED2=$(elapsed2)
log "INFO" "File index build complete. Elapsed: $ELAPSED2"
NODEAL=`find "$SOURCEDIR" -type f \( -name "*.mp4" -o -name "*.Mp4" -o -name "*.MP4"  -o -name "*.m4p" -o -name "*.M4P" -o -name "*.M4p" \) | wc -l`
if [ $NODEAL -ne 0 ]; then
find "$SOURCEDIR" -type f \( -name "*.mp4" -o -name "*.Mp4" -o -name "*.MP4"  -o -name "*.m4p" -o -name "*.M4P" -o -name "*.M4p" \)  -exec rm -rf {} \;
fi
log "INFO" "Starting transcode process on ${#file[@]} files on $HOSTNAME"
echo -e "${yellow}Starting transcode process on${nocolor} ${magenta}${#file[@]}${nocolor} ${yellow}files${nocolor}"
###pushover "transcoder" "Music Transcoder Starting in $TMODE on $HOSTNAME - ${#file[@]} Files to process"
j=0
starttimer2
for f in "${file[@]}"; do
 starttimer2
 fil=${f##*/}
 EXT=${f: -3}
 transc=`echo "$f" | cut -d "." -f3`
 transd=`echo "$f" | cut -d "." -f2`
 OSIZE=$(wc -c "$f" | cut -f 1 -d ' ')
 fne="${f%.*}"
 fng="${fne##*/}"
 fleft=$((${#file[@]}-$j))
 echo -e "${cyan}Copying file to local drive for transcoding on${nocolor} ${magenta}$fne${nocolor}..."
 log "INFO" "Copying file to local drive for transcoding on $THISSERVER $fne"
 starttimer3
 if [[ -z $SIM ]]; then cp -f "$f" "$TRANSDIR"; fi
 ELAPSED3=$(elapsed3)
 log "INFO" "Copy file to local drive for transcoding complete. Elapsed: $ELAPSED3"
 starttimer3
 log "INFO" "Processing audio file on $THISSERVER - $fil"
 echo -e "${yellow}Processing audio file -${nocolor} ${magenta}$fil${nocolor}..."

if [[ -z $SIM ]]; then

  if [ $EXT == "m4a" ] || [ $EXT == "M4a" ] || [ $EXT == "M4A" ]; then
  log "INFO" "M4A file detected, converting to WAV first..."
  if [[ -z $BAUTO ]]; then
   /usr/bin/faad "$TRANSDIR/$fil" -d -o "$TRANSDIR/$fng.wav"
  else
   /usr/bin/faad "$TRANSDIR/$fil" -d -q -o "$TRANSDIR/$fng.wav" &>> $LOGF
  fi
  if [ "$?" == "0" ]; then
  log "INFO" "WAV converion complete, deleting original..."
  rm -f "$TRANSDIR/$fil"
  fil="$fng.wav"
  else
  log "ERROR" "Something went wrong with conversion. Exiting."
  echo -e "${rred}Something went wrong with conversion. Exiting.${nocolor}"
  err_report
  exit 1
  fi
  fi

  if [ $EXT == "wma" ] || [ $EXT == "Wma" ] || [ $EXT == "WMA" ]; then
    log "INFO" "WMA file detected, converting to WAV first..."
  if [[ -z $BAUTO ]]; then
   /usr/bin/mplayer -vo null -vc dummy -af resample=44100 -ao pcm -ao pcm:waveheader -ao pcm:file="$TRANSDIR/$fng.wav" "$TRANSDIR/$fil"
  else
   /usr/bin/mplayer -quiet -vo null -vc dummy -af resample=44100 -ao pcm -ao pcm:waveheader -ao pcm:file="$TRANSDIR/$fng.wav" "$TRANSDIR/$fil"
  fi
  if [ "$?" == "0" ]; then
  log "INFO" "WAV conversion complete, deleting original..."
  rm -f "$TRANSDIR/$fil"
  fil="$fng.wav"
  else
  log "ERROR" "Something went wrong with conversion. Exiting."
  echo -e "${rred}Something went wrong with conversion. Exiting.${nocolor}"
  err_report
  exit 1
  fi
  fi

 if [[ -z $BAUTO ]]; then
 lamesw="-V 2 -q 0 -S --brief"
 nice -n -10 /usr/bin/lame $lamesw "$TRANSDIR/$fil" "$TRANSDIR/$fng.mp3"
 else
 lamesw="-V 2 -q 0 -S" 
 nice -n -10 /usr/bin/lame $lamesw "$TRANSDIR/$fil" "$TRANSDIR/$fng.mp3" &>> $LOGF
 fi
fi
  if [ "$?" != "0" ]; then
   log "ERROR" "Error transcoding audio file $fil. Exiting."
   echo -e "${rred}Error transcoding audio file $file. Exiting.${nocolor}"
   err_report
   exit 1
  fi
  ELAPSED3=$(elapsed3)
   log "INFO" "Audio transcode completed successfully on $THISSERVER- Replacing original $fil. Elapsed: $ELAPSED3"
   log "INFO" "Moving transcoded file back to filer on $THISSERVER - $fng.trans.mp4"
   echo -e "${green}Audio transcode completed successfully. Replacing original $fil. ${magenta}Elapsed: $ELAPSED3${nocolor}"
   if [[ -z $SIM ]]; then
    rm -f "$f"
    mv -f "$TRANSDIR/$fng.mp3" "$fne.mp3"
    rm -f "$TRANSDIR/$fil"
   fi 
done

ELAPSED2=$(elapsed2)

if [[ -z $BID ]]; then
echo -e "${green}All music transcoding complete on ${magenta}${#file[@]}${green} total files.  ${magenta}Elapsed: $ELAPSED2${nocolor}"
log "INFO" "All music transcoding complete.  Continuing to music identification. Elapsed: $ELAPSED2"
LC=0
echo -en "${cyan}Running Beets music organizer"
while [ $LC -lt 11 ]; do
sleep 1
echo -en "."
((LC++))
done
echo -e "${nocolor} "
   starttimer3
   log "INFO" "Running Beets music organizer..."
ANYLEFT=`find "$SOURCEDIR" -type f ! -name "*.mp3" | wc -l`
if [ $ANYLEFT -ne 0 ]; then
find "$SOURCEDIR" -type f ! -name "*.mp3"
echo " "
echo -e "${rred}Erroneous junk files found left after transcoding.  Fix this first!!${nocolor}"
log "ERROR" "Erroneous junk files found left after transcoding. Exiting"
err_report
exit 1
fi 

 if [[ $BAUTO ]]; then
   beet -c /opt/galaxymediatools/conf/beetsconfig_auto.yaml -l /mnt/storage/video/Incoming/logs/beetsimport_auto.log import -q $SOURCEDIR &>> $LOGF
 else
   beet -c /opt/galaxymediatools/conf/beetsconfig.yaml -l /mnt/storage/video/Incoming/logs/beetsimport_manual.log import $SOURCEDIR 
 fi
 
 if [ "$?" != "0" ]; then
    ELAPSED3=$(elapsed3)
    log "ERROR" "Beets DID NOT complete successfully.  Check Log. Elapsed: $ELAPSED3"
 else
    ELAPSED3=$(elapsed3)
    log "INFO" "Beets completed successfully. Elapsed: $ELAPSED3"    
  if [[ $BAUTO ]]; then
    log "INFO" "Moving remaining files to /video/Incoming/musicprocess/failed_id for further examination"
    starttimer3
    sync
    rsync -r --progress $SOURCEDIR/* /mnt/storage/video/Incoming/musicprocess/failed_id
    if [ "$?" == "0" ]; then
    rm -r $SOURCEDIR/*
    else
    log "ERROR" "File coopy error to failed_id"
    echo -e "${rred}File copy error to failed_id${nocolor}"
    err_report
    exit 1
    fi
    ELAPSED3=$(elapsed3)
    log "INFO" "Remaining files moved to /video/Incoming/musicprocess/failed_id. Elapsed: $ELAPSED3"
  else
    echo -e "${rred}Move all id failed files to /video/Incoming/musicprocess/failed_id?${nocolor} "
    read -r -p "[y/N] " response
    response=${response,,}    # tolower
    if [[ $response =~ ^(yes|y)$ ]]; then
     log "INFO" "Moving remaining files to /video/Incoming/musicprocess/failed_id for further examination"
     starttimer3
     sync
    rsync -r --progress $SOURCEDIR/* /mnt/storage/video/Incoming/musicprocess/failed_id
    if [ "$?" == "0" ]; then
    rm -r $SOURCEDIR/*
    else
    log "ERROR" "File copy error to failed_id"
    echo -e "${rred}File copy error to failed_id${nocolor}"
    err_report
    exit 1
    fi
     ELAPSED3=$(elapsed3)
     log "INFO" "Remaining files moved to /video/Incoming/musicprocess/failed_id. Elapsed: $ELAPSED3"
    else
     log "WARN" "NOT moving remaining files to /video/Incoming/musicprocess/failed_id"
    fi
  fi
 fi
else
log "INFO" "Skipping music identification due to command line option -nid. Elapsed: $ELAPSED2"
fi

ANYLEFT2=`find "/mnt/storage/music" -type f ! -name "*.mp3" | wc -l`
if [ $ANYLEFT2 -ne 0 ]; then
find "/mnt/storage/music" -type f ! -name "*.mp3"
echo " "
echo -e "${rred}Erroneous junk files found in /music.  Fix This!!${nocolor}"
log "WARN" "Erroneous junk files found in /music.  Fix This!!"
fi


echo -e "${magenta}Cooling Down...${nocolor}"
chmod ugo+rwx /mnt/storage/video/Incoming/musicprocess -R

sync
ELAPSED=$(elapsed)
log "INFO" "<--- Completed Music Transcoder script on $HOSTNAME. Elapsed: $ELAPSED"
