#!/bin/bash
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        echo " "
        echo "Galaxy Media Tools - Automatic Mass Movie Renamer"
        echo " "
        echo "-h or --help : Help"
        echo "-s  : Simulation only"
	echo "-f  : Skip already proper formatting check"
	echo "-v  : Verbose"
        echo " "
        exit 0
fi

if [ "$1" == "-s" ] ||  [ "$2" == "-s" ] ||  [ "$3" == "-s" ]; then SIM="yes"; fi
if [ "$1" == "-f" ] ||  [ "$2" == "-f" ] ||  [ "$3" == "-f" ]; then FORCE="yes"; fi
if [ "$1" == "-v" ] ||  [ "$2" == "-v" ] ||  [ "$3" == "-v" ]; then VERB="yes"; fi

source "/opt/galaxymediatools/functions/precheck"
source "/opt/galaxymediatools/functions/movierename"
source "/opt/galaxymediatools/functions/isinteg"
LOGF="$LOGDIR/MMR_$THISSERVER_$CTS.txt"
INDXFIL="MMR_fileindex_$THISSERVER.txt"
if [[ $FORCE ]]; then EFED="Forced"; else EFED="Not Forced"; fi
if [[ $SIM ]]; then
 echo "Script starting up in SIMULATION ($EFED) MODE"
else
 echo "Script starting up in normal ($EFED) mode"
fi
touch $LOGF 
printf "`eval date +%m/%d/%y"-"%H:%M` - *** Script Start \n" >> $LOGF
echo "Resetting transcode directory $TRANSDIR"
if [ -d $TRANSDIR ]; then
 rm -r $TRANSDIR/* &> /dev/null
else
 mkdir $TRANSDIR
fi
echo "Cleaning out non-movie files..."
find "$MOVIEDIR" -type f -name *.srt -delete
find "$MOVIEDIR" -type f -name *.idx -delete
find "$MOVIEDIR" -type f -name *.sub -delete
find "$MOVIEDIR" -type f -name *.nfo -delete
find "$MOVIEDIR" -type f -name *.txt -delete
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Building index of files to process \n" >> $LOGF
echo "Building file index..."
sleep 5
if [ -f "$LOGDIR/$INDXFIL" ]; then
 rm -f $LOGDIR/$INDXFIL
fi
find "$MOVIEDIR" -type f | sort >> $LOGDIR/$INDXFIL
i=0
while read sfile
do
    if [[ -f $sfile ]]; then
        file[$i]=$sfile
        i=$(($i+1))
    fi
done < $LOGDIR/$INDXFIL
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Sending Pushover script start-up notification\n" >> $LOGF
echo "Sending pushover notification"
if [[ -z $SIM ]]; then $APPDIR/pushover.sh -T $POAK -U $POUK "Mass Movie Rename Script Starting - ${#file[@]} Files to proccess" &> /dev/null
fi
if [[ -z $VERB ]]; then echo "Processing Movie Files..."; fi
j=0
for f in "${file[@]}"; do
 fil=${f##*/}
 EXT=${f: -3}
 EXT=${EXT,,}
if [ "$EXT" == "m4v" ]; then
$APPDIR/transmovie "$f"
else
 isinteg "$f"
 if [ "$ISINTEG" == "1" ]; then
  if [[ $VERB ]]; then echo "$fil passed integrity check."; fi
  printf "`eval date +%m/%d/%y"-"%H:%M` - 03 File passed integrity check - $fil \n" >> $LOGF
  VRESCHK=`echo "$f" | awk -F'[][]' '{print $2}'`
  SCHK=`echo "$f" | sed 's/.*\]\([^]]*\)\[.*/\1/g'`
  if [ "$SCHK" != "" ] && [ "$VRESCHK" != "1080p" ] && [ "$VRESCHK" != "720p" ] && [ "$VRESCHK" != "480p" ] && [ "$VRESCHK" != "SD" ] || [[ $FORCE ]] ; then
   WIDTH=`ffprobe -select_streams v -show_streams "$f" 2>/dev/null | grep width | sed -e 's/width=//'`
   HEIGHT=`ffprobe -select_streams v -show_streams "$f" 2>/dev/null | grep height | sed -e 's/height=//'`
   VCODEC=`ffprobe -select_streams v -show_streams "$f" 2>/dev/null | grep codec_name | sed -e 's/codec_name=//' | head -n 1`
   CDTS=`ffprobe -select_streams v -show_streams "$f" 2>/dev/null | grep codec_tag_string | sed -e 's/codec_tag_string=//' | head -n 1`
   ACODE=`ffprobe -select_streams a -show_streams "$f" 2>/dev/null | grep codec_name | sed -e 's/codec_name=//'`
   ACODEC1=`ffprobe -select_streams a -show_streams "$f" 2>/dev/null | grep codec_name | sed -e 's/codec_name=//' | head -n 1`
   ACHANS1=`ffprobe -select_streams a -show_streams "$f" 2>/dev/null | grep channels | sed -e 's/channels=//' | head -n 1`
   ACODEC2=`ffprobe -select_streams a -show_streams "$f" 2>/dev/null | grep codec_name | sed -e 's/codec_name=//' | tail -n 1`
   ACHANS2=`ffprobe -select_streams a -show_streams "$f" 2>/dev/null | grep channels | sed -e 's/channels=//' | tail -n 1`
   ACNT=`wc -l <<< "$ACODE"`
   if [ "$ACNT" -gt "1" ]; then
    ACODEC=`echo ${ACODEC1^^}"-"$ACHANS1"ch+"${ACODEC2^^}"-"$ACHANS2"ch"`
   else
     ACODEC=`echo ${ACODEC1^^}"-"$ACHANS1"ch"`
   fi 
   YEAR=`echo "$f" | grep -oE '\([[:alnum:]]*?\)' | sed 's/[()]//g'`
   MNAME=`echo "$f" | sed -e 's/([^()]*)//g' | sed -e 's/\[[^][]*\]//g' | sed 's/....$//' | sed -e 's/^ *//' -e 's/ *$//'`
   if [ "$WIDTH" == "1920" ]; then
     VRES="1080p"
    elif [ "$WIDTH" == "1280" ]; then
     VRES="720p"
    elif [ "$WIDTH" == "720" ]; then
    if [ "$HEIGHT" -gt "570" ]; then
     VRES="576p"
    else
      VRES="480p"
    fi
    elif [ "$WIDTH" -lt "720" ]; then
     VRES="SD"	
    fi
    if [ "$VCODEC" == "mpeg4" ]; then
     VCODEC=`echo $CDTS | awk '{print tolower($0)}'`
    fi
    if [ "$HEIGHT" == "" ]; then
     echo "Cannot determine video HEIGHT. Exiting."
     printf "`eval date +%m/%d/%y"-"%H:%M` - 98 Cannot determine VIDEO HEIGHT - $fil \n" >> $LOGF 
     exit 1
    fi
    if [ "$WIDTH" == "" ]; then
     echo "Cannot determine video WIDTH. Exiting."
     printf "`eval date +%m/%d/%y"-"%H:%M` - 98 Cannot determine VIDEO WIDTH - $fil \n" >> $LOGF
     exit 1
    fi
    if [ "$VCODEC" == "" ]; then
     echo "Cannot determine video codec. Exiting."
     printf "`eval date +%m/%d/%y"-"%H:%M` - 98 Cannot determine VIDEO CODEC - $fil \n" >> $LOGF
     exit 1
    fi
    if [ "$ACODEC1" == "" ]; then
     echo "Cannot determine audio codec. Exiting."
     printf "`eval date +%m/%d/%y"-"%H:%M` - 98 Cannot determine AUDIO CODEC - $fil \n" >> $LOGF
     exit 1
    fi
    if [ "$ACHANS1" == "" ]; then
     echo "Cannot determine audio channels. Exiting."
     printf "`eval date +%m/%d/%y"-"%H:%M` - 98 Cannot determine AUDIO CHANNELS - $fil \n" >> $LOGF
     exit 1
    fi
    if [ "$YEAR" != "" ]; then
     FNAME=`echo "$MNAME ($YEAR) [$VRES][$VCODEC][$ACODEC].$EXT" | sed 's/ \+/ /g'`
     if [[ -z $SIM ]]; then
      if [ "$f" != "$FNAME" ]; then
       printf "`eval date +%m/%d/%y"-"%H:%M` - 01 Movie Renamed - $fil -> $FNAME \n" >> $LOGF
       echo " * Movie Renamed - $fil -> $FNAME"
       mv "$f" "$FNAME"
      else
       if [[ $VERB ]]; then echo "File already has correct name $fil"; fi
       printf "`eval date +%m/%d/%y"-"%H:%M` - 02 File already has correct name - $fil \n" >> $LOGF
      fi
     else
      if [ "$f" != "$FNAME" ]; then
       printf "`eval date +%m/%d/%y"-"%H:%M` - 01 SIM MODE Movie NOT Renamed - $fil -> $FNAME \n" >> $LOGF
       echo " * SIM MODE Movie NOT Renamed - $fil -> $FNAME"
       mv "$f" "$FNAME"
      else
       if [[ $VERB ]]; then echo "File already has correct name $fil"; fi
       printf "`eval date +%m/%d/%y"-"%H:%M` - 02 File already has correct name - $fil \n" >> $LOGF
      fi
     fi
    else
     echo "$fil is missing year, marking file in missingyear log "
     printf "$f \n" >> "$LOGDIR/missingyear.txt"
    fi
  else
  if [[ $VERB ]]; then echo "Skipping correctly formatted file ($EFED) - $fil"; fi
  printf "`eval date +%m/%d/%y"-"%H:%M` - 02 Skipping correctly formatted file ($EFED) - $fil \n" >> $LOGF 
  fi 
   else
    echo "File FAILED integrity test!! Purging file and marking for re-download"
    if [[ -z $SIM ]]; then 
    $APPDIR/pushover.sh -T $POAK -U $POUK "Movie FAILED integrity test!! Purging file and marking for re-download - $fil"
    fi
    printf "`eval date +%m/%d/%y"-"%H:%M` - 67 File failed integrity test - $fil \n" >> $LOGF
    printf "`eval date +%m/%d/%y"-"%H:%M` - 68 Purging file and marking for re-download - $fil \n" >> $LOGF
    printf "$f \n" >> "$LOGDIR/re-downloads.txt"
  #if [[ -z $SIM ]]; then rm -r "$f"; fi
   fi
fi
done
TTIME=$(date +%s)
   ETIME=$(gettime "$STIME" "$TTIME")
rm -r $TRANSDIR/* &> /dev/null
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Sending Pushover completion notification\n" >> $LOGF
if [[ -z $SIM ]]; then $APPDIR/pushover.sh -T $POAK -U $POUK "Mass Movie Rename Script Complete - Total Elapsed: $ETIME"
fi
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Plex server movie section update  \n" >> $LOGF
echo "Script ended."
if [[ -z $SIM ]]; then ssh $PLEXINFO -q 'sudo su plex -c "plexscan -s -c $PLEXMCAT &> /dev/null &"' &> /dev/null &
   fi
printf "`eval date +%m/%d/%y"-"%H:%M` - ***Script End - Elapsed Time: $ETIME\n" >> $LOGF
pm-suspend
#sed 's/\]\ \[/\]\[/g' removes space between brackets
