#!/bin/bash
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
        echo " "
        echo "Galaxy Media Tools - Automatic Mass Movie Renamer"
        echo " "
        echo "-h or --help : Help"
        echo "-s  : Simulation only"
	echo "-t  : Dont Transcode any movies whatsoever"
	echo "-i  : Use IMDB matching"
	echo "-p  : Prompt at renames"
        echo "-n  : No Suspend"
	echo "-v  : Verbose"
        echo " "
        exit 0
fi

if [ "$1" == "-s" ] ||  [ "$2" == "-s" ] ||  [ "$3" == "-s" ] ||  [ "$4" == "-s" ] || [ "$5" == "-s" ] || [ "$6" == "-s" ]; then SIM="yes"; fi
if [ "$1" == "-v" ] ||  [ "$2" == "-v" ] ||  [ "$3" == "-v" ] ||  [ "$4" == "-v" ] ||  [ "$5" == "-v" ] ||  [ "$6" == "-v" ]; then VERB="yes"; fi
if [ "$1" == "-i" ] ||  [ "$2" == "-i" ] ||  [ "$3" == "-i" ] ||  [ "$4" == "-i" ] ||  [ "$5" == "-i" ] ||  [ "$6" == "-i" ]; then IMDB="yes"; fi
if [ "$1" == "-t" ] ||  [ "$2" == "-t" ] ||  [ "$3" == "-t" ] ||  [ "$4" == "-t" ] ||  [ "$5" == "-t" ] ||  [ "$6" == "-t" ]; then NOTRANS="yes"; fi
if [ "$1" == "-p" ] ||  [ "$2" == "-p" ] ||  [ "$3" == "-p" ] ||  [ "$4" == "-p" ] ||  [ "$5" == "-p" ] ||  [ "$6" == "-p" ]; then PROMPT="yes"; fi
if [ "$1" == "-n" ] ||  [ "$2" == "-n" ] ||  [ "$3" == "-n" ] ||  [ "$4" == "-n" ] || [ "$5" == "-n" ] || [ "$6" == "-n" ]; then SUSP="yes"; fi

source "/opt/galaxymediatools/functions/precheck"
source "/opt/galaxymediatools/functions/movierename"
source "/opt/galaxymediatools/functions/isinteg"
LOGF="$LOGDIR/MMR_$THISSERVER_$CTS.txt"
INDXFIL="MMR_fileindex_$THISSERVER.txt"
IMREN=0
IMFAIL=0
MISSYR=0
if [[ $NOTRANS ]]; then EFED="No Transcode"; else EFED="Transcode"; fi
if [[ $SIM ]]; then
 echo "Script starting up in SIMULATION ($EFED) MODE"
else
 echo "Script starting up in normal ($EFED) mode"
fi
touch $LOGF 
printf "`eval date +%m/%d/%y"-"%H:%M` - *** Script Start \n" >> $LOGF
echo "Resetting transcode directory $TRANSDIR"
if [ "$TRANSDIR" == "" ];then
echo -e "${errorcolor}ERROR! TRANSDIR is null. Exiting."
exit 1
fi
if [ -d $TRANSDIR ]; then
 rm -r $TRANSDIR/* &> /dev/null
else
 mkdir $TRANSDIR
fi
echo "Cleaning out non-movie files..."
find "$MOVIEDIR" -type f -name *.idx -delete
find "$MOVIEDIR" -type f -name *.sub -delete
find "$MOVIEDIR" -type f -name *.nfo -delete
find "$MOVIEDIR" -type f -name *.txt -delete
find "$MOVIEDIR" -type f -name *. -delete
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Building index of files to process \n" >> $LOGF
echo "Building file index..."
sleep 5
if [ -f "$LOGDIR/$INDXFIL" ]; then
 rm -f $LOGDIR/$INDXFIL
fi
find "$MOVIEDIR" -mtime -1 -type f | sort >> $LOGDIR/$INDXFIL
i=0
while read sfile
do
    if [[ -f $sfile ]]; then
        file[$i]=$sfile
        i=$(($i+1))
    fi
done < $LOGDIR/$INDXFIL
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Sending Pushover script start-up notification\n" >> $LOGF
echo "Sending pushover notification"
#if [[ -z $SIM ]]; then $APPDIR/pushover.sh -T $POAK -U $POUK "Mass Movie Renamer Starting on $THISSERVER - ${#file[@]} Files to proccess" &> /dev/null; fi
if [[ -z $VERB ]]; then echo "Processing Movie Files..."; fi
j=0
for f in "${file[@]}"; do
 fil=${f##*/}
 EXT=${f: -3}
 EXT=${EXT,,}
 OSIZE=$(wc -c "$f" | cut -f 1 -d ' ')
 if [ "$EXT" == "m4v" ] && [ "$NOTRANS" != "yes" ] ; then
  echo "M4V or 3Gig+ Movie found, transcoding movie to mp4..."
  rm -rf /var/lock/gtrans.lock &> /dev/null
  eval $APPDIR/transmovie \"$f\"
  mkdir /var/lock/gtrans.lock &> /dev/null
  echo "M4V Transcode complete."
 else
  /opt/galaxymediatools/functions/isinteg "$f"
  if [ "$ISINTEG" == "1" ]; then
   if [[ $VERB ]]; then echo "$fil passed integrity check."; fi
   printf "`eval date +%m/%d/%y"-"%H:%M` - 03 File passed integrity check - $fil \n" >> $LOGF
   VRESCHK=`echo "$f" | awk -F'[][]' '{print $2}'`
   SCHK=`echo "$f" | sed 's/.*\]\([^]]*\)\[.*/\1/g'`
   #if [ "$SCHK" != "" ] && [ "$VRESCHK" != "1080p" ] && [ "$VRESCHK" != "720p" ] && [ "$VRESCHK" != "480p" ] && [ "$VRESCHK" != "SD" ] || [[ $FORCE ]] ; then
   if [[ $IMDB ]]; then
    /opt/galaxymediatools/functions/movierename "$f" "-i"
   else
    /opt/galaxymediatools/functions/movierename "$f"
   fi

   if [[ -z $SIM ]]; then

    if [ "$f" != "$renamedmoviewp" ]; then
     echo " * Movie Renamed - $fil -> $renamedmovienp"

     if [[ $PROMPT ]]; then
      read -p "Would you like to rename movie [y/N]? " -n 1 -r
      echo    # (optional) move to a new line
      if [[ $REPLY =~ ^[Yy]$ ]]; then
       mv "$f" "$renamedmoviewp"
      fi
     else
      mv "$f" "$renamedmoviewp"
     fi
     printf "`eval date +%m/%d/%y"-"%H:%M` - 01 Movie Renamed - $fil -> $renamedmovienp \n" >> $LOGF

    else
    if [[ $VERB ]]; then echo "File already has correct name $fil"; fi
    printf "`eval date +%m/%d/%y"-"%H:%M` - 02 File already has correct name - $fil \n" >> $LOGF
   fi
   else
   if [ "$f" != "$renamedmoviewp" ]; then
    printf "`eval date +%m/%d/%y"-"%H:%M` - 01 SIM MODE Movie NOT Renamed - $fil -> $renamedmovienp \n" >> $LOGF
    echo " * SIM MODE Movie NOT Renamed - $fil -> $renamedmovienp"
   else
    if [[ $VERB ]]; then echo "File already has correct name $fil"; fi
    printf "`eval date +%m/%d/%y"-"%H:%M` - 02 File already has correct name - $fil \n" >> $LOGF
   fi
  fi
#  else
#  if [[ $VERB ]]; then echo "Skipping correctly formatted file ($EFED) - $fil"; fi
#  printf "`eval date +%m/%d/%y"-"%H:%M` - 02 Skipping correctly formatted file ($EFED) - $fil \n" >> $LOGF 
# fi 
 else
  echo "File FAILED integrity test!! Purging file and marking for re-download"
  if [[ -z $SIM ]]; then 
   $APPDIR/pushover.sh -T $POAK -U $POUK "Movie FAILED integrity test!! Purging file and marking for re-download - $fil"
  fi
  printf "`eval date +%m/%d/%y"-"%H:%M` - 67 File failed integrity test - $fil \n" >> $LOGF
  printf "`eval date +%m/%d/%y"-"%H:%M` - 68 Purging file and marking for re-download - $fil \n" >> $LOGF
  printf "$f \n" >> "$LOGDIR/re-downloads.txt"
  ###############################if [[ -z $SIM ]]; then mv -f "$f" "$TRASHDIR" ; fi
 fi
fi
done

TTIME=$(date +%s)
   ETIME=$(gettime "$STIME" "$TTIME")
rm -r $TRANSDIR/* &> /dev/null
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Sending Pushover completion notification\n" >> $LOGF
if [[ -z $SIM ]]; then $APPDIR/pushover.sh -T $POAK -U $POUK "Mass Movie Renamer Complete. $IMREN Renamed, $IMFAIL IMDB not found, $MISSYR No Year - Total Elapsed: $ETIME"
fi
printf "`eval date +%m/%d/%y"-"%H:%M` - 00 Plex server movie section update  \n" >> $LOGF
echo "Script ended."
if [[ -z $SIM ]]; then curl "http://172.25.1.26:32400/library/sections/1/refresh?X-Plex-Token=HvscgmK51nrqnQaxTNBi"
   fi
printf "`eval date +%m/%d/%y"-"%H:%M` - ***Script End - Elapsed Time: $ETIME\n" >> $LOGF
sleep 10
if [[ -z $SUSP ]]; then
pm-suspend
fi
#sed 's/\]\ \[/\]\[/g' removes space between brackets
